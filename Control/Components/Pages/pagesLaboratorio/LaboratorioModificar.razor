@page "/laboratorios/modificar/{id:int}"
@inject ILaboratoriosRepositorio _laboratoriosRepositorio
@inject NavigationManager NavigationManager
@inject Notificacion Notificacion

<h3>Modificar Laboratorio</h3>

@if (laboratorio != null)
{
    <EditForm Model="@laboratorio" OnValidSubmit="@ModificarLaboratorio">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="nombreLab" class="form-label">Nombre del Laboratorio</label>
            <InputText id="nombreLab" class="form-control" @bind-Value="@laboratorio.NombreLab" />
        </div>

        <div class="mb-3">
            <label for="ubicacion" class="form-label">Ubicación</label>
            <InputText id="ubicacion" class="form-control" @bind-Value="@laboratorio.Ubicacion" />
        </div>

        <div class="mb-3">
            <label for="capacidad" class="form-label">Capacidad</label>
            <InputNumber id="capacidad" class="form-control" @bind-Value="@laboratorio.Capacidad" />
        </div>

        <button type="submit" class="btn btn-success">Guardar Cambios</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
}
else
{
    <p>Cargando datos del laboratorio...</p>
}

@code {
    [Parameter] public int id { get; set; }
    private Laboratorios laboratorio;

    protected override async Task OnInitializedAsync()
    {
        laboratorio = await _laboratoriosRepositorio.GetOne(id);
    }

    private async Task ModificarLaboratorio()
    {
        try
        {
            await _laboratoriosRepositorio.Modificar(laboratorio);
            NavigationManager.NavigateTo("/laboratorios");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al modificar el laboratorio: {ex.Message}");
            // Aquí podrías mostrar un mensaje de error más descriptivo
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/laboratorios");
    }
}
