@page "/incidencias"
@inject IIncidenciasRepositorio _incidenciasRepositorio
@inject Notificacion Notificacion
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@if (Cargando)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/Images/Carga.gif" alt="Cargando contenido..." />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Lista de Incidencias</h2>
                </div>
            </div>
        </div>

        <div class="card-body py-4">
            @if (!string.IsNullOrEmpty(MensajeError))
            {
                <div class="alert alert-danger text-center">@MensajeError</div>
            }

            <div class="row pb-3">
                <div class="col-8">
                    <input type="text" class="form-control" placeholder="Buscar por ID" @bind="BuscarId" @oninput="FiltrarIncidencias" />
                </div>
                <div class="col-4 text-end">
                    <button class="btn btn-secondary me-2" @onclick="GenerarReporte" style="width: 250px;">
                        <i class="bi bi-file-earmark-text"></i> Generar Reporte
                    </button>

                    <!-- Botón de Agregar Nuevo Incidente -->
                    <a href="/incidencias/agregar" class="btn btn-success" style="width: 250px;">
                        <i class="bi bi-plus-circle"></i> Agregar Nuevo Incidente
                    </a>
                </div>
            </div>

            @if (pagedIncidencias != null && pagedIncidencias.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>ID Incidencia</th>
                            <th>Descripción</th>
                            <th>Fecha de Reporte</th>
                            <th>Fecha de Solución</th>
                            <th>Rol</th>
                            <th>Razón</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in pagedIncidencias)
                        {
                            <tr>
                                <td>@item.IdIncidencias</td>
                                <td>@item.DescInc</td>
                                <td>@item.FechaReporte.ToString("dd/MM/yyyy") ?? "N/A"</td>
                                <td>@item.FechaSolucion.ToString("dd/MM/yyyy") ?? "N/A"</td>
                                <td>@(item.Rol?.ToString() ?? "Sin rol")</td>
                                <td>@(item.Razon?.ToString() ?? "Sin razón")</td>
                                <td>
                                    <a href="@($"incidencias/modificar/{item.IdIncidencias}")" class="btn btn-primary">
                                        <i class="bi bi-pencil-square"></i> Modificar
                                    </a>
                                    <button class="btn btn-danger" @onclick="() => ConfirmarEliminar(item.IdIncidencias)">
                                        <i class="bi bi-trash"></i> Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-center">No hay incidencias disponibles</p>
            }

            <!-- Controles de Paginación -->
            <div class="d-flex justify-content-between">
                <button @onclick="PreviousPage" class="btn btn-secondary" disabled="@(!HasPreviousPage)">Anterior</button>
                <span> Página @currentPage de @totalPages </span>
                <button @onclick="NextPage" class="btn btn-secondary" disabled="@(!HasNextPage)">Siguiente</button>
            </div>
        </div>
    </div>
}

@code {
    private bool Cargando { get; set; } = false;

    private List<Incidencias> incidencias { get; set; } = new();
    private List<Incidencias> pagedIncidencias { get; set; } = new();
    private string BuscarId { get; set; } = string.Empty;

    private int currentPage { get; set; } = 1;
    private int pageSize { get; set; } = 5;
    private int totalPages { get; set; } = 1;
    private string MensajeError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cargando = true;
        await CargarIncidencias();
        Cargando = false;
    }

    private async Task GenerarReporte()
    {
        await JSRuntime.InvokeVoidAsync("generarReporte");
    }

    private async Task CargarIncidencias()
    {
        try
        {
            incidencias = (await _incidenciasRepositorio.GetAllAsync()).ToList();
            totalPages = (int)Math.Ceiling((double)incidencias.Count / pageSize);
            LoadPagedData();
            MensajeError = string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar incidencias: {ex.Message}");
            MensajeError = "Ocurrió un error al cargar las incidencias. Intente nuevamente.";
        }
    }

    private void LoadPagedData()
    {
        var incidenciasFiltradas = string.IsNullOrEmpty(BuscarId) ?
            incidencias :
            incidencias.Where(i => i.IdIncidencias.ToString().Contains(BuscarId)).ToList();

        pagedIncidencias = incidenciasFiltradas.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
        totalPages = (int)Math.Ceiling((double)incidenciasFiltradas.Count / pageSize);
    }

    private void FiltrarIncidencias()
    {
        currentPage = 1; // Reiniciar a la primera página
        LoadPagedData();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            LoadPagedData();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            LoadPagedData();
        }
    }

    private bool HasPreviousPage => currentPage > 1;
    private bool HasNextPage => currentPage < totalPages;

    private async Task ConfirmarEliminar(int id)
    {
        bool confirmado = await Notificacion.Confirmar("¿Está seguro de que desea eliminar esta incidencia?");
        if (confirmado)
        {
            await EliminarIncidencia(id);
        }
    }

    private async Task EliminarIncidencia(int id)
    {
        try
        {
            var resultado = await _incidenciasRepositorio.EliminarPorId(id);

            if (resultado)
            {
                incidencias = incidencias.Where(i => i.IdIncidencias != id).ToList();
                LoadPagedData();
                await Notificacion.Exito("Incidencia eliminada correctamente.");
            }
            else
            {
                await Notificacion.Error("No se pudo eliminar la incidencia.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar incidencia: {ex.Message}");
            await Notificacion.Error("Ocurrió un error al eliminar la incidencia.");
        }
    }
}
