@page "/recursos/eliminar/{id:int}"
@inject IRecursosRepositorio _recursosRepositorio
@inject NavigationManager NavigationManager

<h3>Eliminar Recurso</h3>

@if (recursos != null)
{
    <div>
        <p>¿Estás seguro que deseas eliminar el recurso <b>@recursos.NombreRec</b>?</p>
        <button class="btn btn-danger" @onclick="EliminarRecurso">Eliminar</button>
        <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </div>
}
else
{
    <p>Cargando datos del recurso...</p>
}

@code {
    [Parameter] public int id { get; set; }
    private Recursos recursos;

    protected override async Task OnParametersSetAsync()
    {
        var recurso = await _recursosRepositorio.GetAll();
        recursos = recurso.FirstOrDefault(p => p.IdRecursos == id);

        // Si el recurso no existe, redirigir al listado de incidencias.
        if (recursos == null)
        {
            NavigationManager.NavigateTo("/recursos");
        }
    }

    private async Task EliminarRecurso()
    {
        try
        {
            await _recursosRepositorio.Eliminar(recursos);
            NavigationManager.NavigateTo("/recursos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar el recurso: {ex.Message}");
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/recursos");
    }
}